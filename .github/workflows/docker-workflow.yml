name: docker-workflow

on:
  workflow_call:
    inputs:
      dockerfile:
        required: true
        type: string
      image_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      bin_name:
        required: false
        type: string
      datadog_label:
        required: false
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      DOCKER_REGISTRY:
        required: true

jobs:
  build:
    name: docker_build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Checkout tools
        uses: actions/checkout@v3
        with:
          repository: onlydustxyz/cicd
          path: onlydust-cicd-tools

      - name: Verify the dockerfile exists
        run: |
          if [ ! -d "$GITHUB_WORKSPACE/onlydust-cicd-tools/dockerfiles/${{ inputs.dockerfile }}" ]; then
            echo "Dockerfile ${{ inputs.dockerfile }} not found in shared repository"
            exit 1
          fi

      - name: Copy docker files
        run: |
          cp -r $GITHUB_WORKSPACE/onlydust-cicd-tools/dockerfiles/${{ inputs.dockerfile }}/* $GITHUB_WORKSPACE/

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build the Docker image
        id: build-image
        env:
          DOCKER_REPOSITORY: ${{ inputs.image_name }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          IMAGE_TAG: ${{ inputs.image_tag }}
          DATADOG_LABEL: ${{ inputs.datadog_label }}
          BIN_NAME: ${{ inputs.bin_name }}
        run: |
          echo "Building docker image $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG"
          docker build --build-arg BIN_NAME="$BIN_NAME" --build-arg DATADOG_LABEL="$DATADOG_LABEL" -t $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG .
          echo "::set-output name=image::$DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG"

      - name: Push the image to Docker Hub
        id: push-image
        env:
          IMAGE: ${{ steps.build-image.outputs.image }}
        run: |
          echo "Pushing image $IMAGE to Docker Hub..."
          docker push $IMAGE
          echo "Done"
          echo "::set-output name=image::$IMAGE"
